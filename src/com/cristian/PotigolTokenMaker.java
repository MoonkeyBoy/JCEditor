/* The following code was generated by JFlex 1.4.1 on 15/11/15 19:19 */

package com.cristian;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenMaker;
import org.fife.ui.rsyntaxtextarea.TokenImpl;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 15/11/15 19:19 from the specification file
 * <tt>/home/cristian/√Årea de Trabalho/PotigolTokenMaker.flex</tt>
 */
public class PotigolTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LONG_STRING_2 = 1;
  public static final int LONG_STRING_1 = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\12\1\0\1\32\1\30\22\0\1\32\1\30\1\11"+
    "\1\31\1\0\2\30\1\10\1\55\1\55\1\57\1\26\1\57\1\26"+
    "\1\23\1\57\1\16\7\21\2\3\1\62\1\64\1\60\1\56\1\61"+
    "\1\30\1\63\4\22\1\25\1\22\3\2\1\27\1\2\1\15\5\2"+
    "\1\6\2\2\1\7\2\2\1\20\2\2\1\55\1\13\1\55\1\57"+
    "\1\1\1\0\1\36\1\22\1\34\1\50\1\24\1\46\1\54\1\47"+
    "\1\37\1\27\1\2\1\14\1\40\1\42\1\45\1\41\1\53\1\4"+
    "\1\33\1\43\1\5\1\35\1\2\1\17\2\2\1\55\1\30\1\55"+
    "\1\30\144\0\1\44\3\0\1\52\1\0\1\51\uff16\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\2\2\4\1\5\1\2"+
    "\1\3\1\6\1\7\1\6\1\10\1\11\15\2\1\12"+
    "\3\6\1\2\2\0\1\13\1\3\1\14\1\13\1\14"+
    "\1\4\2\0\1\2\1\13\1\3\1\13\1\2\1\7"+
    "\1\2\1\7\10\2\1\0\5\2\3\0\2\14\1\0"+
    "\1\2\1\3\4\2\1\7\3\2\1\0\1\2\2\0"+
    "\1\14\5\2\1\0\3\2\2\0\4\2\2\7\2\2"+
    "\1\15\1\0\1\15\3\2\1\0\1\2\1\0\3\2"+
    "\1\0\2\2\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\152\0\u01dd\0\u0212\0\u0247\0\u027c\0\152\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\152\0\u05cc"+
    "\0\u0601\0\u0636\0\152\0\u066b\0\u06a0\0\u06d5\0\u06d5\0\u070a"+
    "\0\u073f\0\u06d5\0\152\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\237\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\152\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\152"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\237\0\u1415\0\152\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\u1691\0\u16c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\6\1\7\1\10"+
    "\1\11\1\12\1\3\1\13\1\4\1\14\2\4\1\5"+
    "\1\4\1\15\1\16\1\4\1\17\1\4\1\3\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\3\1\33\1\34\1\4\1\35\2\3"+
    "\1\4\1\36\1\37\1\40\1\17\1\40\1\41\1\42"+
    "\2\43\35\0\1\44\10\0\1\45\104\0\7\4\4\0"+
    "\7\4\1\0\2\4\1\0\1\4\3\0\11\4\1\0"+
    "\4\4\2\0\2\4\10\0\3\46\1\5\4\46\3\0"+
    "\1\46\2\47\1\5\2\46\1\5\1\46\1\50\2\51"+
    "\1\0\1\52\1\0\1\46\1\0\22\46\6\0\1\46"+
    "\2\0\7\4\1\10\1\11\2\0\7\4\1\0\2\4"+
    "\1\0\1\4\3\0\11\4\1\0\4\4\2\0\2\4"+
    "\11\0\3\4\1\6\1\4\1\6\1\4\1\10\1\11"+
    "\2\0\7\4\1\0\2\4\1\0\1\4\3\0\11\4"+
    "\1\0\4\4\2\0\2\4\10\0\10\10\1\53\1\10"+
    "\1\0\1\54\51\10\11\11\1\53\1\0\1\55\51\11"+
    "\1\0\7\4\4\0\7\4\1\0\1\56\1\4\1\0"+
    "\1\4\3\0\11\4\1\0\4\4\2\0\2\4\10\0"+
    "\3\46\1\57\4\46\3\0\1\46\2\47\1\60\2\61"+
    "\1\60\1\46\1\50\2\51\1\0\1\52\1\0\1\46"+
    "\1\0\22\46\6\0\1\46\4\0\1\50\12\0\1\50"+
    "\2\0\1\50\44\0\7\4\4\0\7\4\1\0\2\4"+
    "\1\0\1\4\3\0\1\62\4\4\1\63\1\4\1\64"+
    "\1\4\1\0\4\4\2\0\2\4\10\0\12\20\1\0"+
    "\52\20\32\0\1\21\33\0\7\4\4\0\7\4\1\0"+
    "\1\65\1\4\1\0\1\4\3\0\11\4\1\0\4\4"+
    "\2\0\2\4\11\0\7\4\4\0\7\4\1\0\2\4"+
    "\1\0\1\4\3\0\3\4\1\66\5\4\1\0\4\4"+
    "\2\0\2\4\11\0\7\4\4\0\7\4\1\0\1\67"+
    "\1\4\1\0\1\4\3\0\3\4\1\70\5\4\1\0"+
    "\4\4\2\0\2\4\11\0\7\4\4\0\7\4\1\0"+
    "\2\4\1\0\1\4\3\0\10\4\1\71\1\0\4\4"+
    "\2\0\2\4\11\0\7\4\4\0\7\4\1\0\2\4"+
    "\1\0\1\4\3\0\5\4\1\72\3\4\1\0\4\4"+
    "\2\0\2\4\11\0\7\4\4\0\7\4\1\0\2\4"+
    "\1\0\1\4\3\0\11\4\1\0\1\73\3\4\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\3\4\1\74\5\4\1\0\4\4\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\3\4\1\75\5\4\1\76\4\4\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\4\4\1\77\4\4\1\0\4\4\2\0"+
    "\2\4\11\0\4\4\1\63\2\4\4\0\7\4\1\0"+
    "\2\4\1\0\1\4\3\0\11\4\1\0\4\4\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\3\4\1\100\1\101\4\4\1\0\4\4"+
    "\2\0\2\4\11\0\7\4\4\0\7\4\1\0\1\63"+
    "\1\4\1\0\1\4\3\0\4\4\1\102\4\4\1\0"+
    "\4\4\2\0\2\4\11\0\7\4\4\0\7\4\1\0"+
    "\1\103\1\4\1\0\1\4\3\0\11\4\1\0\4\4"+
    "\2\0\2\4\66\0\1\17\2\0\1\17\61\0\1\17"+
    "\64\0\1\17\3\0\1\17\26\0\1\104\76\0\1\105"+
    "\26\0\10\46\3\0\10\46\1\0\2\46\1\0\1\46"+
    "\1\0\1\46\1\0\22\46\6\0\1\46\4\0\1\50"+
    "\12\0\1\50\2\0\1\50\2\0\2\106\1\0\1\107"+
    "\35\0\3\46\1\110\4\46\3\0\3\46\1\110\2\46"+
    "\1\110\1\46\1\0\2\46\1\111\1\46\1\0\1\46"+
    "\1\0\22\46\6\0\1\46\1\0\12\10\1\0\52\10"+
    "\12\11\1\0\52\11\1\0\7\4\4\0\7\4\1\0"+
    "\2\4\1\0\1\4\3\0\4\4\1\112\4\4\1\0"+
    "\4\4\2\0\2\4\10\0\3\46\1\57\4\46\3\0"+
    "\3\46\1\57\2\46\1\57\1\46\1\50\2\51\1\0"+
    "\1\52\1\0\1\46\1\0\22\46\6\0\1\46\1\0"+
    "\3\46\1\57\4\46\3\0\1\46\2\47\1\60\2\46"+
    "\1\60\1\46\1\50\2\51\1\0\1\52\1\0\1\46"+
    "\1\0\22\46\6\0\1\46\1\0\3\46\1\113\4\46"+
    "\3\0\3\46\1\113\2\46\2\113\1\0\2\113\1\0"+
    "\1\46\1\0\1\46\1\0\1\46\1\113\1\46\1\113"+
    "\7\46\1\113\1\46\1\113\4\46\6\0\1\46\2\0"+
    "\7\4\4\0\7\4\1\0\2\4\1\0\1\4\3\0"+
    "\1\4\1\114\7\4\1\0\4\4\2\0\2\4\11\0"+
    "\7\4\4\0\7\4\1\0\2\4\1\0\1\4\3\0"+
    "\10\4\1\31\1\0\4\4\2\0\1\115\1\4\11\0"+
    "\7\4\4\0\7\4\1\0\2\4\1\0\1\4\3\0"+
    "\7\4\1\116\1\4\1\0\4\4\2\0\2\4\11\0"+
    "\7\4\4\0\7\4\1\0\2\4\1\0\1\4\3\0"+
    "\1\75\10\4\1\0\4\4\2\0\2\4\11\0\3\4"+
    "\1\117\3\4\4\0\7\4\1\0\2\4\1\0\1\4"+
    "\3\0\11\4\1\0\4\4\2\0\2\4\11\0\3\4"+
    "\1\63\3\4\4\0\7\4\1\0\2\4\1\0\1\4"+
    "\3\0\11\4\1\0\4\4\2\0\2\4\11\0\7\4"+
    "\4\0\7\4\1\0\1\63\1\4\1\0\1\4\3\0"+
    "\11\4\1\0\4\4\1\120\1\0\2\4\11\0\7\4"+
    "\4\0\7\4\1\0\2\4\1\0\1\4\3\0\6\4"+
    "\1\121\2\4\1\0\4\4\2\0\2\4\11\0\7\4"+
    "\4\0\7\4\1\0\2\4\1\0\1\4\3\0\11\4"+
    "\1\0\3\4\1\63\2\0\2\4\11\0\3\4\1\122"+
    "\3\4\4\0\7\4\1\0\2\4\1\0\1\4\3\0"+
    "\1\66\10\4\1\0\4\4\2\0\2\4\11\0\7\4"+
    "\4\0\7\4\1\0\2\4\1\0\1\4\3\0\11\4"+
    "\1\0\1\63\3\4\2\0\2\4\55\0\1\120\20\0"+
    "\7\4\4\0\7\4\1\0\2\4\1\0\1\4\3\0"+
    "\6\4\1\75\2\4\1\0\4\4\2\0\2\4\11\0"+
    "\7\4\4\0\1\123\6\4\1\0\2\4\1\0\1\4"+
    "\3\0\1\4\1\122\7\4\1\0\4\4\1\0\1\124"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\5\4\1\63\3\4\1\0\4\4\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\2\4\1\63\6\4\1\0\4\4\2\0"+
    "\2\4\11\0\3\4\1\125\3\4\4\0\7\4\1\0"+
    "\2\4\1\0\1\4\3\0\11\4\1\0\4\4\2\0"+
    "\2\4\14\0\1\126\74\0\1\127\53\0\1\130\12\0"+
    "\1\130\2\0\1\130\4\0\1\111\36\0\3\46\1\110"+
    "\4\46\3\0\3\46\1\110\2\46\1\110\1\46\1\0"+
    "\2\46\1\0\1\52\1\0\1\46\1\0\22\46\6\0"+
    "\1\46\4\0\1\130\12\0\1\130\2\0\1\130\44\0"+
    "\7\4\4\0\7\4\1\0\2\4\1\0\1\4\3\0"+
    "\3\4\1\131\5\4\1\0\4\4\2\0\2\4\10\0"+
    "\3\46\1\113\4\46\3\0\1\46\2\47\1\113\2\46"+
    "\2\113\1\0\2\113\1\0\1\46\1\0\1\46\1\0"+
    "\1\46\1\113\1\46\1\113\7\46\1\113\1\46\1\113"+
    "\4\46\6\0\1\46\2\0\3\4\1\132\3\4\4\0"+
    "\7\4\1\0\2\4\1\0\1\4\3\0\11\4\1\0"+
    "\1\133\3\4\2\0\2\4\11\0\4\4\1\134\2\4"+
    "\4\0\7\4\1\0\2\4\1\0\1\4\3\0\11\4"+
    "\1\0\4\4\2\0\2\4\11\0\7\4\4\0\7\4"+
    "\1\0\2\4\1\0\1\4\3\0\3\4\1\135\5\4"+
    "\1\136\4\4\2\0\2\4\11\0\7\4\4\0\7\4"+
    "\1\0\2\4\1\0\1\4\3\0\11\4\1\0\3\4"+
    "\1\137\2\0\2\4\11\0\3\4\1\140\3\4\4\0"+
    "\7\4\1\0\2\4\1\0\1\4\3\0\11\4\1\0"+
    "\4\4\2\0\2\4\11\0\7\4\4\0\7\4\1\0"+
    "\2\4\1\0\1\4\3\0\3\4\1\63\5\4\1\0"+
    "\4\4\2\0\2\4\11\0\7\4\4\0\7\4\1\0"+
    "\2\4\1\0\1\4\3\0\1\141\10\4\1\0\4\4"+
    "\2\0\2\4\46\0\1\120\27\0\7\4\4\0\7\4"+
    "\1\0\1\63\1\4\1\0\1\4\3\0\11\4\1\0"+
    "\4\4\2\0\2\4\60\0\1\142\47\0\1\143\34\0"+
    "\1\130\12\0\1\130\2\0\1\130\5\0\1\107\36\0"+
    "\1\144\6\4\4\0\7\4\1\0\2\4\1\0\1\4"+
    "\3\0\11\4\1\0\4\4\2\0\2\4\11\0\7\4"+
    "\4\0\7\4\1\0\1\145\1\4\1\0\1\4\3\0"+
    "\11\4\1\0\4\4\2\0\2\4\11\0\7\4\4\0"+
    "\1\146\6\4\1\0\2\4\1\0\1\4\3\0\11\4"+
    "\1\0\4\4\2\0\2\4\11\0\7\4\4\0\7\4"+
    "\1\0\2\4\1\0\1\4\3\0\3\4\1\147\5\4"+
    "\1\0\4\4\2\0\2\4\11\0\7\4\4\0\7\4"+
    "\1\0\2\4\1\0\1\4\3\0\11\4\1\0\1\150"+
    "\3\4\2\0\2\4\55\0\1\151\20\0\7\4\4\0"+
    "\7\4\1\0\2\4\1\0\1\4\3\0\3\4\1\152"+
    "\5\4\1\0\4\4\2\0\2\4\11\0\7\4\4\0"+
    "\7\4\1\0\2\4\1\0\1\4\3\0\4\4\1\153"+
    "\4\4\1\0\4\4\2\0\2\4\11\0\7\4\4\0"+
    "\7\4\1\0\2\4\1\0\1\4\3\0\11\4\1\0"+
    "\1\154\3\4\2\0\2\4\46\0\1\155\73\0\1\156"+
    "\20\0\7\4\4\0\7\4\1\0\2\4\1\0\1\4"+
    "\3\0\4\4\1\157\3\4\1\160\1\0\4\4\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\2\4\1\122\6\4\1\0\4\4\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\11\4\1\0\2\4\1\122\1\4\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\7\4\1\161\1\4\1\0\4\4\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\1\125\10\4\1\0\4\4\2\0\2\4"+
    "\43\0\1\162\32\0\7\4\4\0\7\4\1\0\2\4"+
    "\1\0\1\4\3\0\11\4\1\0\3\4\1\163\2\0"+
    "\2\4\11\0\7\4\4\0\7\4\1\0\2\4\1\0"+
    "\1\4\3\0\5\4\1\122\3\4\1\0\4\4\2\0"+
    "\2\4\60\0\1\164\15\0\7\4\4\0\7\4\1\0"+
    "\2\4\1\0\1\4\3\0\7\4\1\165\1\4\1\0"+
    "\4\4\2\0\2\4\11\0\7\4\4\0\7\4\1\0"+
    "\1\166\1\4\1\0\1\4\3\0\11\4\1\0\4\4"+
    "\2\0\2\4\11\0\7\4\4\0\7\4\1\0\2\4"+
    "\1\0\1\4\3\0\10\4\1\75\1\0\4\4\2\0"+
    "\2\4\34\0\1\120\41\0\7\4\4\0\7\4\1\0"+
    "\1\167\1\4\1\0\1\4\3\0\11\4\1\0\4\4"+
    "\2\0\2\4\34\0\1\170\41\0\7\4\4\0\7\4"+
    "\1\0\2\4\1\0\1\4\3\0\10\4\1\163\1\0"+
    "\4\4\2\0\2\4\11\0\7\4\4\0\3\4\1\171"+
    "\3\4\1\0\2\4\1\0\1\4\3\0\11\4\1\0"+
    "\4\4\2\0\2\4\11\0\7\4\4\0\7\4\1\0"+
    "\2\4\1\0\1\4\3\0\4\4\1\172\4\4\1\0"+
    "\4\4\2\0\2\4\47\0\1\173\26\0\7\4\4\0"+
    "\7\4\1\0\2\4\1\0\1\4\3\0\10\4\1\141"+
    "\1\0\4\4\2\0\2\4\11\0\3\4\1\141\3\4"+
    "\4\0\7\4\1\0\2\4\1\0\1\4\3\0\11\4"+
    "\1\0\4\4\2\0\2\4\14\0\1\143\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5883];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\1\11\4\1\1\11\17\1\1\11"+
    "\3\1\1\11\2\0\5\1\1\11\2\0\20\1\1\0"+
    "\5\1\3\0\1\11\1\1\1\0\6\1\1\11\3\1"+
    "\1\0\1\1\2\0\6\1\1\0\3\1\2\0\11\1"+
    "\1\0\1\11\3\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public PotigolTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = LONG_STRING_2;
				break;
			case Token.LITERAL_CHAR:
				state = LONG_STRING_1;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PotigolTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PotigolTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { addToken(Token.RESERVED_WORD);
          }
        case 14: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 15: break;
        case 13: 
          { addToken(Token.FUNCTION);
          }
        case 16: break;
        case 12: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 17: break;
        case 4: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 18: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 19: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 20: break;
        case 8: 
          { addToken(Token.COMMENT_EOL);
          }
        case 21: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 22: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 23: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 24: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 25: break;
        case 10: 
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 124: break;
            case LONG_STRING_2: {
              if (firstToken==null) {
										addToken(Token.LITERAL_STRING_DOUBLE_QUOTE); 
									}
									return firstToken;
            }
            case 125: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
